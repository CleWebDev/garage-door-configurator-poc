<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Garage Door Configurator</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f5f5;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            text-align: center;
        }

        .header h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .header p {
            color: #7f8c8d;
        }

        .main-content {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }

        .config-panel {
            flex: 1;
            min-width: 400px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .preview-panel {
            flex: 1;
            min-width: 400px;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #2c3e50;
        }

        select, input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        select:focus, input:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
        }

        .configure-btn {
            width: 100%;
            padding: 12px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .configure-btn:hover {
            background-color: #2980b9;
        }

        .configure-btn:disabled {
            background-color: #bdc3c7;
            cursor: not-allowed;
        }

        .door-preview {
            width: 100%;
            height: 300px;
            border: 1px solid #ddd;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            margin-bottom: 15px;
        }

        .door-preview img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

        .door-preview.empty {
            color: #7f8c8d;
        }

        .results-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-top: 20px;
            display: none;
            width: 100%;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
            color: #7f8c8d;
        }

        .results {
            display: none;
        }

        .delivery-info {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
        }

        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .product-card {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            border: 1px solid #ecf0f1;
        }

        .product-name {
            font-weight: 500;
            color: #2c3e50;
            margin-bottom: 5px;
        }

        .product-price {
            font-weight: bold;
            color: #27ae60;
            margin-bottom: 8px;
        }

        .product-description {
            color: #7f8c8d;
            font-size: 14px;
        }

        .weather-section {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
        }

        .weather-section h4 {
            margin-bottom: 10px;
            color: #2c3e50;
        }

        .order-btn {
            width: 100%;
            padding: 12px;
            background-color: #e74c3c;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s;
            display: none;
        }

        .order-btn:hover {
            background-color: #c0392b;
        }

        .success-message {
            margin-top: 15px;
            padding: 15px;
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            border-radius: 6px;
            color: #155724;
            display: none;
        }

        .error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            display: none;
        }

        .typing-text {
            overflow: hidden;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        @media (max-width: 768px) {
            .main-content {
                flex-direction: column;
            }
            
            .config-panel, .preview-panel {
                min-width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Garage Door Configurator</h1>
            <p>Design and configure your perfect garage door</p>
        </div>

        <div class="main-content">
            <div class="config-panel">
                <h3>Configuration Options</h3>
                <form id="configForm">
                    <div class="form-group">
                        <label for="color">Color:</label>
                        <select id="color" name="color" required>
                            <option value="">Select color...</option>
                            <option value="grey" selected>Grey</option>
                            <option value="white">White</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="slate_width">Slate Width:</label>
                        <select id="slate_width" name="slate_width" required>
                            <option value="">Select width...</option>
                            <option value="narrow" selected>Narrow</option>
                            <option value="wide">Wide</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="windows">Windows:</label>
                        <select id="windows" name="windows" required>
                            <option value="">Select option...</option>
                            <option value="yes">With Windows</option>
                            <option value="no" selected>No Windows</option>
                        </select>
                    </div>

                    <button type="submit" class="configure-btn" id="configureBtn">
                        Configure
                    </button>
                </form>
            </div>

            <div class="preview-panel">
                <h3>Door Preview</h3>
                <div class="door-preview" id="doorPreview">
                    <img src="/static/images/grey-narrow.webp" alt="Garage Door Preview" />
                </div>
                <div id="configSummary">
                    <p><strong>Configuration:</strong></p>
                    <p>Color: Grey</p>
                    <p>Width: Narrow</p>
                    <p>Windows: No</p>
                </div>
            </div>
        </div>

        <div class="results-section" id="resultsSection">
            <div id="loading" class="loading">
                Processing your configuration...
            </div>

            <div id="error" class="error"></div>

            <div id="results" class="results">
                <div class="delivery-info">
                    <h4>Delivery Information</h4>
                    <div id="deliveryContent"></div>
                </div>

                <h4>Recommended Additional Products</h4>
                <div class="products-grid" id="productsGrid"></div>

                <div class="weather-section">
                    <h4>Weather Information for Independence, Ohio</h4>
                    <div id="weatherContent" class="typing-text"></div>
                </div>

                <button class="order-btn" id="orderBtn">Order Now</button>
            </div>
        </div>

        <div class="success-message" id="successMessage"></div>
    </div>

    <script>
        class GarageDoorConfigurator {
            constructor() {
                this.form = document.getElementById('configForm');
                this.configureBtn = document.getElementById('configureBtn');
                this.orderBtn = document.getElementById('orderBtn');
                this.doorPreview = document.getElementById('doorPreview');
                this.configSummary = document.getElementById('configSummary');
                this.resultsSection = document.getElementById('resultsSection');
                this.loading = document.getElementById('loading');
                this.results = document.getElementById('results');
                this.error = document.getElementById('error');
                
                this.currentConfig = null;
                this.initEventListeners();
            }

            initEventListeners() {
                // Update preview when options change
                this.form.addEventListener('change', () => this.updatePreview());
                
                // Handle form submission
                this.form.addEventListener('submit', (e) => this.handleConfigure(e));
                
                // Handle order button
                this.orderBtn.addEventListener('click', () => this.handleOrder());
            }

            updatePreview() {
                const formData = new FormData(this.form);
                const color = formData.get('color') || 'grey';
                const slateWidth = formData.get('slate_width') || 'narrow';
                const windows = formData.get('windows') || 'no';

                // Always show an image, defaulting to grey-narrow
                const windowsSuffix = windows === 'yes' ? '-windows' : '';
                const imageName = `${color}-${slateWidth}${windowsSuffix}.webp`;
                
                this.doorPreview.innerHTML = `<img src="/static/images/${imageName}" alt="Garage Door Preview" />`;
                this.doorPreview.classList.remove('empty');
                
                this.configSummary.innerHTML = `
                    <p><strong>Configuration:</strong></p>
                    <p>Color: ${color.charAt(0).toUpperCase() + color.slice(1)}</p>
                    <p>Width: ${slateWidth.charAt(0).toUpperCase() + slateWidth.slice(1)}</p>
                    <p>Windows: ${windows === 'yes' ? 'Yes' : 'No'}</p>
                `;
                
                // Reset results if configuration changed
                this.hideResults();
            }

            async handleConfigure(event) {
                event.preventDefault();
                
                const formData = new FormData(this.form);
                this.currentConfig = {
                    color: formData.get('color'),
                    slate_width: formData.get('slate_width'),
                    windows: formData.get('windows')
                };

                this.showLoading();
                this.hideError();
                
                try {
                    const response = await fetch('/configure', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(this.currentConfig)
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    this.displayResults(result);
                    
                } catch (error) {
                    this.showError(`Error processing configuration: ${error.message}`);
                } finally {
                    this.hideLoading();
                }
            }

            displayResults(result) {
                // Update delivery information
                const deliveryContent = document.getElementById('deliveryContent');
                deliveryContent.innerHTML = `
                    <p><strong>Estimated delivery:</strong> ${result.delivery_date} (${result.delivery_days} days)</p>
                `;

                // Update products
                const productsGrid = document.getElementById('productsGrid');
                productsGrid.innerHTML = '';
                
                result.recommendations.forEach(product => {
                    const productCard = document.createElement('div');
                    productCard.className = 'product-card';
                    productCard.innerHTML = `
                        <div class="product-name">${product.name}</div>
                        <div class="product-price">$${product.price}</div>
                        <div class="product-description">${product.description}</div>
                    `;
                    productsGrid.appendChild(productCard);
                });

                // Type out weather information
                this.typeText('weatherContent', 
                    result.weather_recommendation  // Only show the recommendation
                );

                this.results.style.display = 'block';
                this.resultsSection.style.display = 'block';
                
                // Show order button after a delay
                setTimeout(() => {
                    this.orderBtn.style.display = 'block';
                }, 2000);
            }

            typeText(elementId, text) {
                const element = document.getElementById(elementId);
                element.innerHTML = '';
                
                let i = 0;
                const speed = 10; // 3x faster (was 30, now 10 milliseconds per character)
                
                function typeWriter() {
                    if (i < text.length) {
                        element.innerHTML += text.charAt(i);
                        i++;
                        setTimeout(typeWriter, speed);
                    }
                }
                
                typeWriter();
            }

            async handleOrder() {
                try {
                    const response = await fetch('/order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(this.currentConfig)
                    });

                    const result = await response.json();
                    
                    const successMessage = document.getElementById('successMessage');
                    successMessage.innerHTML = `
                        <strong>Order Placed Successfully!</strong><br>
                        ${result.message}
                    `;
                    successMessage.style.display = 'block';
                    
                    this.orderBtn.textContent = 'Order Placed';
                    this.orderBtn.disabled = true;
                    
                } catch (error) {
                    this.showError(`Error placing order: ${error.message}`);
                }
            }

            showLoading() {
                this.loading.style.display = 'block';
                this.results.style.display = 'none';
                this.configureBtn.disabled = true;
                this.configureBtn.textContent = 'Processing...';
            }

            hideLoading() {
                this.loading.style.display = 'none';
                this.configureBtn.disabled = false;
                this.configureBtn.textContent = 'Configure';
            }

            showError(message) {
                this.error.textContent = message;
                this.error.style.display = 'block';
                this.results.style.display = 'none';
            }

            hideError() {
                this.error.style.display = 'none';
            }

            hideResults() {
                this.resultsSection.style.display = 'none';
                this.orderBtn.style.display = 'none';
                this.orderBtn.disabled = false;
                this.orderBtn.textContent = 'Order Now';
                document.getElementById('successMessage').style.display = 'none';
            }
        }

        // Initialize the app when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new GarageDoorConfigurator();
        });
    </script>
</body>
</html>